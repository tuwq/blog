<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="root.mapper.ArticaleMapper" >
  <resultMap id="BaseResultMap" type="root.model.Articale" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="face_cover" property="faceCover" jdbcType="VARCHAR" />
    <result column="praise" property="praise" jdbcType="INTEGER" />
    <result column="comment_sum" property="commentSum" jdbcType="INTEGER" />
    <result column="browse_sum" property="browseSum" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="weight" property="weight" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="root.model.Articale" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, title, face_cover, praise, comment_sum, browse_sum, status, weight, 
    create_time, update_time
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  
  <resultMap id="CategoryResultMap" type="root.model.Articale" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="face_cover" property="faceCover" jdbcType="VARCHAR" />
    <result column="praise" property="praise" jdbcType="INTEGER" />
    <result column="comment_sum" property="commentSum" jdbcType="INTEGER" />
    <result column="browse_sum" property="browseSum" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="weight" property="weight" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
    <association property="user" javaType="root.model.User">
		<result column="user_id" property="id"/>
		<result column="user_nickname" property="nickname"/>
	</association>
  </resultMap>
  
   <resultMap id="articleMap" type="root.model.Articale">
  	<id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="faceCover" property="faceCover" jdbcType="VARCHAR" />
    <result column="praise" property="praise" jdbcType="INTEGER" />
    <result column="commentSum" property="commentSum" jdbcType="INTEGER" />
    <result column="browseSum" property="browseSum" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <association property="user" javaType="root.model.User">
    	<result column="user_nickname" property="nickname"/>
    </association>
    <collection property="categoryList" javaType="list" ofType="root.model.Category">
        <result column="category_id" property="id"/>
    	<result column="category_name" property="name"/>
    </collection>
  </resultMap>
  
  <select id="countAll" resultType="long">
  	SELECT count(1)
  	FROM articale
  </select>
  
  <select id="pageWithUser" parameterType="map" resultMap="articleMap">
  	SELECT a.id id,a.title title,a.face_cover faceCover,a.praise praise,a.comment_sum commentSum,a.browse_sum browseSum,a.create_time create_time,a.update_time update_time,
  	a.status status,a.user_id user_id,u.nickname user_nickname
  	FROM articale a 
  	LEFT JOIN articale_category ac on a.id = ac.articale_id
	LEFT JOIN category c on c.id = ac.category_id
	LEFT JOIN `user` u on u.id = a.user_id
	GROUP BY a.id
	ORDER BY a.praise desc,a.comment_sum desc,a.update_time desc
	LIMIT #{skip}, #{pageSize}
  </select>
  
  <select id="pageByKeyWord" parameterType="map" resultMap="articleMap">
    SELECT a.id id,a.title title,a.face_cover faceCover,a.praise praise,a.comment_sum commentSum,a.browse_sum browseSum,a.create_time create_time,a.update_time update_time,
  	a.status status,a.user_id user_id,u.nickname user_nickname
  	FROM articale a 
  	LEFT JOIN articale_category ac on a.id = ac.articale_id
	LEFT JOIN category c on c.id = ac.category_id
	LEFT JOIN `user` u on u.id = a.user_id
	<where>
		<if test="keyword != null and keyword != ''" >
			and (a.title like '%${keyword}%' or c.name like '%${keyword}%' or a.content like '%${keyword}%')
		</if>
	</where>
	GROUP BY a.id
	ORDER BY a.praise desc,a.comment_sum desc,a.update_time desc
	LIMIT #{skip}, #{pageSize}
  </select>
  
  <select id="countByKeyword" parameterType="map" resultType="long">
  	SELECT count(DISTINCT a.id) 
	FROM articale a 
	LEFT JOIN articale_category ac on a.id = ac.articale_id 
	LEFT JOIN category c on c.id = ac.category_id
	<where>
		<if test="keyword!=null and keyword!= ''">
			and (a.title like '%${keyword}%' or c.name like '%${keyword}%' or a.content like '%${keyword}%')
		</if>
	</where>
  </select>
  
  <select id="categoryPage" parameterType="map" resultMap="CategoryResultMap">
  	SELECT a.id id,a.title title,a.face_cover face_cover,a.user_id user_id,a.praise praise,
  	a.create_time create_time,a.update_time update_time,a.browse_sum browse_sum,a.comment_sum comment_sum,a.content content,
  	u.id user_id,u.nickname user_nickname
	FROM articale a
	LEFT JOIN articale_category ac ON a.id = ac.articale_id
	LEFT JOIN `user` u ON u.id = a.user_id
	WHERE ac.category_id = #{categoryId}
	ORDER BY a.praise desc,a.comment_sum desc,a.update_time desc
	LIMIT #{skip},#{pageSize}
  </select>
  
  <select id="countAllByCategoryId" parameterType="int" resultType="long">
  	SELECT count(1)
	FROM articale a
	LEFT JOIN articale_category ac ON ac.articale_id = a.id
	WHERE ac.category_id = #{categoryId}
  </select>
  
  <select id="hotDiscuss" parameterType="map" resultMap="CategoryResultMap">
  	SELECT *
	FROM articale
	ORDER BY comment_sum desc
	LIMIT 0,#{quantity}
  </select>
  
  <select id="categoryArticale" parameterType="map" resultMap="CategoryResultMap">
  	SELECT a.id id,a.title title,a.face_cover face_cover,a.user_id user_id,
  	a.create_time create_time,a.update_time update_time,a.browse_sum browse_sum,a.comment_sum comment_sum,a.content content
	FROM articale a
	LEFT JOIN articale_category ac on a.id = ac.articale_id
	WHERE ac.category_id = #{category_id}
	ORDER BY a.praise DESC,a.update_time DESC
	LIMIT 0,#{quantity}
  </select>
  
  <select id="praiseByQuantity" parameterType="map" resultMap="BaseResultMap">
  	SELECT <include refid="Base_Column_List" />
	FROM articale
	GROUP BY praise desc,update_time desc
	LIMIT 0,#{quantity}
  </select>
  
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from articale
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from articale
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="root.model.Articale" >
    insert into articale (id, user_id, title, 
      face_cover, praise, comment_sum, 
      browse_sum, status, weight, 
      create_time, update_time, content
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, 
      #{faceCover,jdbcType=VARCHAR}, #{praise,jdbcType=INTEGER}, #{commentSum,jdbcType=INTEGER}, 
      #{browseSum,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{weight,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="root.model.Articale" >
    insert into articale
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="faceCover != null" >
        face_cover,
      </if>
      <if test="praise != null" >
        praise,
      </if>
      <if test="commentSum != null" >
        comment_sum,
      </if>
      <if test="browseSum != null" >
        browse_sum,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="weight != null" >
        weight,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="faceCover != null" >
        #{faceCover,jdbcType=VARCHAR},
      </if>
      <if test="praise != null" >
        #{praise,jdbcType=INTEGER},
      </if>
      <if test="commentSum != null" >
        #{commentSum,jdbcType=INTEGER},
      </if>
      <if test="browseSum != null" >
        #{browseSum,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="weight != null" >
        #{weight,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="root.model.Articale" >
    update articale
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="faceCover != null" >
        face_cover = #{faceCover,jdbcType=VARCHAR},
      </if>
      <if test="praise != null" >
        praise = #{praise,jdbcType=INTEGER},
      </if>
      <if test="commentSum != null" >
        comment_sum = #{commentSum,jdbcType=INTEGER},
      </if>
      <if test="browseSum != null" >
        browse_sum = #{browseSum,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="weight != null" >
        weight = #{weight,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="root.model.Articale" >
    update articale
    set user_id = #{userId,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      face_cover = #{faceCover,jdbcType=VARCHAR},
      praise = #{praise,jdbcType=INTEGER},
      comment_sum = #{commentSum,jdbcType=INTEGER},
      browse_sum = #{browseSum,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      weight = #{weight,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="root.model.Articale" >
    update articale
    set user_id = #{userId,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      face_cover = #{faceCover,jdbcType=VARCHAR},
      praise = #{praise,jdbcType=INTEGER},
      comment_sum = #{commentSum,jdbcType=INTEGER},
      browse_sum = #{browseSum,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      weight = #{weight,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>